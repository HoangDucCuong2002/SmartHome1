{"version":3,"sources":["theme.ts","App.tsx","hooks/useSmartLightInterface.ts","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["theme","extendTheme","config","initialColorMode","colors","gray","withDefaultColorScheme","colorScheme","App","React","isConnected","setIsConnected","toggleCharacteristic","setToggleCharacteristic","temperatureCharacteristic","setTemperatureCharacteristic","brightnessCharacteristic","setBrightnessCharacteristic","UUID","connect","a","navigator","bluetooth","requestDevice","filters","namePrefix","optionalServices","device","console","error","gatt","server","getPrimaryService","service","getCharacteristic","toggleChar","brightnessChar","temperatureChar","toggle","readValue","currentValue","lightIsCurrentlyOn","getUint8","writeValueWithResponse","Uint8Array","setBrightness","number","alert","setTemperature","useSmartLightInterface","height","onClick","size","type","name","min","max","onChange","event","Number","target","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7d2d23b2.chunk.js","sourcesContent":["import { extendTheme, withDefaultColorScheme } from \"@chakra-ui/react\";\n\nconst theme = extendTheme(\n  {\n    config: {\n      initialColorMode: \"light\",\n    },\n    colors: {\n      gray: {\n        100: \"#fafafa\",\n        200: \"#eeeeee\",\n        300: \"#e0e0e0\",\n        400: \"#bdbdbd\",\n        500: \"#9e9e9e\",\n        700: \"#424242\",\n        800: \"#212121\",\n        900: \"#1a1a1a\",\n      },\n    },\n  },\n  withDefaultColorScheme({ colorScheme: \"gray\" })\n);\n\nexport default theme;\n","import * as React from \"react\";\nimport {\n  Button,\n  Center,\n  ChakraProvider,\n  Stack,\n} from \"@chakra-ui/react\";\nimport { useSmartLightInterface } from \"./hooks/useSmartLightInterface\";\nimport theme from \"./theme\";\n\nexport const App = () => {\n  const {\n    connect,\n    toggle,\n    isConnected,\n    setBrightness,\n    setTemperature\n  } = useSmartLightInterface();\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Center height={\"100vh\"}>\n        <Stack>\n          {isConnected ? (\n            <Stack>\n              <h3>Toggle light</h3>\n              <Button onClick={toggle} colorScheme={\"yellow\"} size=\"lg\">\n                Toggle light\n              </Button>\n              <h3>Brightness</h3>\n              <input type=\"range\" name=\"brightness\" min=\"1\" max=\"254\" onChange={(event)=>{ setBrightness(Number(event.target.value)) }} />\n              <h3>Temperature</h3>\n              <input type=\"range\" name=\"temperature\" min=\"153\" max=\"454\" onChange={(event)=>{ setTemperature(Number(event.target.value)) }} />\n            </Stack>\n          ) : (\n            <Button onClick={connect} colorScheme=\"pink\" size=\"lg\">\n              Connect\n            </Button>\n          )}\n        </Stack>\n      </Center>\n    </ChakraProvider>\n  );\n};\n","import * as React from \"react\";\nexport interface SmartLight {\n  connect: () => void;\n  isConnected: boolean;\n  toggle: () => void;\n  setBrightness: (number: number) => void;\n  setTemperature: (number: number) => void;\n}\n\n\nexport const useSmartLightInterface = (): SmartLight => {\n  const [isConnected, setIsConnected] = React.useState(false);\n  const [toggleCharacteristic, setToggleCharacteristic] =\n    React.useState<BluetoothRemoteGATTCharacteristic | null>(null);\n  const [temperatureCharacteristic, setTemperatureCharacteristic] =\n    React.useState<BluetoothRemoteGATTCharacteristic | null>(null);\n  const [brightnessCharacteristic, setBrightnessCharacteristic] =\n    React.useState<BluetoothRemoteGATTCharacteristic | null>(null);\n  \n  // Philips Hue Light Service UUID\n  const UUID = \"932c32bd-0000-47a2-835a-a8d455b859dd\"\n\n  const connect = async () => {\n    // Request to find bluetooth device with name prefix start with Hue and service is Philips Hue Light Service\n    const device = await navigator.bluetooth.requestDevice({\n      filters: [\n        {\n          namePrefix: \"Hue\",\n        },\n      ],\n      optionalServices: [UUID],\n    });\n\n    // Handle if can't connect\n    if (!device) {\n      console.error(\"Failed to connect to device.\");\n      return;\n    }\n\n    // Get device's server after connect to device\n    const server = await device.gatt?.connect();\n\n    // Handle if can't get device's server\n    if (!server) {\n      console.error(\"Failed to connect to server\");\n      return;\n    }\n\n    // Get Philips Hue Light Control Services\n    const service = await server.getPrimaryService(UUID);\n\n    // Handle if can't get device's services\n    if (!service) {\n      console.error(\"Failed to connect to service.\");\n      return;\n    }\n\n    // Get Philips Hue Light On/Off Toggle Characteristic\n    const toggleChar = await service.getCharacteristic(\n      \"932c32bd-0002-47a2-835a-a8d455b859dd\"\n    );\n\n    if (!toggleChar) {\n      console.error(\"Failed to get toggle characteristic.\");\n      return;\n    }\n    setToggleCharacteristic(toggleChar);\n\n    // Get Philips Hue Light Brightness Characteristic\n    const brightnessChar = await service.getCharacteristic(\n      \"932c32bd-0003-47a2-835a-a8d455b859dd\"\n    );\n\n    if (!brightnessChar) {\n      console.error(\"Failed to get brightness characteristic.\");\n      return;\n    }\n    setBrightnessCharacteristic(brightnessChar);\n\n    // Get Philips Hue Light Temperature Characteristic\n    const temperatureChar = await service.getCharacteristic(\n      \"932c32bd-0004-47a2-835a-a8d455b859dd\"\n    );\n\n    if (!temperatureChar) {\n      console.error(\"Failed to get temperature characteristic.\");\n      return;\n    }\n    setTemperatureCharacteristic(temperatureChar);\n\n    // Set is connected state\n    setIsConnected(true);\n  };\n\n  // Toggle On Off Light Use Philips Hue Light On/Off Toggle Characteristic\n  const toggle = async () => {\n    const currentValue = await toggleCharacteristic?.readValue();\n    const lightIsCurrentlyOn = currentValue?.getUint8(0) ? true : false;\n\n    await toggleCharacteristic?.writeValueWithResponse(\n      new Uint8Array([lightIsCurrentlyOn ? 0x0 : 0x1])\n    );\n  };\n\n  // Set Brightness For Philips Hue Light use Brightness Characteristic\n  const setBrightness = async (number: number) => {\n    if (number <= 1 || number >= 254) {\n      alert(\"WARNING: Brightness may be out of range\");\n      return;\n    }\n    await brightnessCharacteristic?.writeValueWithResponse(\n      new Uint8Array([number])\n    );\n  };\n\n  // Set Temperature For Philips Hue Light use Temperature Characteristic\n  const setTemperature = async (number: number) => {\n    if (number <= 153 || number >= 454) {\n      alert(\"WARNING: Temperature may be out of range\");\n      return;\n    }\n    await temperatureCharacteristic?.writeValueWithResponse(\n      new Uint8Array([number])\n    );\n  };\n\n  return {\n    connect,\n    toggle,\n    isConnected,\n    setBrightness,\n    setTemperature,\n  };\n};\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}